{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 65,
            "patches": [
                {
                    "date": 1712482358559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1712482364515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+import React from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button type=\"button\" className=\"button is-info is-light\">\n+          Sort alphabetically\n+        </button>\n+\n+        <button type=\"button\" className=\"button is-success is-light\">\n+          Sort by length\n+        </button>\n+\n+        <button type=\"button\" className=\"button is-warning is-light\">\n+          Reverse\n+        </button>\n+\n+        <button type=\"button\" className=\"button is-danger is-light\">\n+          Reset\n+        </button>\n+      </div>\n+\n+      <ul>\n+        <ul>\n+          <li data-cy=\"Good\">Dumplings</li>\n+          <li data-cy=\"Good\">Carrot</li>\n+          <li data-cy=\"Good\">Eggs</li>\n+          <li data-cy=\"Good\">Ice cream</li>\n+          <li data-cy=\"Good\">Apple</li>\n+          <li data-cy=\"Good\">...</li>\n+        </ul>\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482436108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions((prevOptions) => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-danger ${reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReset}\n+        >\n+          Reset\n+        </button>\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482469042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import React from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions((prevOptions) => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-danger ${reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReset}\n+        >\n+          Reset\n+        </button>\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482475489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions((prevOptions) => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-danger ${reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReset}\n+        >\n+          Reset\n+        </button>\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482630451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     });\n   };\n \n   const handleReverse = () => {\n-    setReorderOptions((prevOptions) => ({\n+    setReorderOptions(prevOptions => ({\n       ...prevOptions,\n       isReversed: !prevOptions.isReversed,\n     }));\n   };\n"
                },
                {
                    "date": 1712482739584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482747887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+        <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482758480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+              <button\n+              type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482765011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+          <button\n+              type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482770036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+          type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482775369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+          type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+          ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482784781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+          type=\"button\"\n+              className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+            </button>\n+          ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482793419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+          type=\"button\"\n+              className=\"button is-danger\"\n+              onClick={handleReset}\n+            >\n+            Reset\n+            </button>\n+          ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482801459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <butttype=\"button\"\n+              className=\"button is-danger\"\n+            onClick={handleReset}\n+            >\n+            Reset\n+            </button>\n+          ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482807867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482813213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE\n+        || reorderOptions.isReversed ? (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482818279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,11 @@\n           Reverse\n         </button>\n \n         {reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n+\n+\n+          \n           <button\n             type=\"button\"\n             className=\"button is-danger\"\n             onClick={handleReset}\n"
                },
                {
                    "date": 1712482825726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE\n+        || reorderOptions.isReversed ? (\n+\n+\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482840819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n             onClick={handleReset}\n           >\n             Reset\n           </button>\n-        ) : null}\n+        ) : null{'}'}\n       </div>\n \n       <ul>\n         {visibleGoods.map((good, index) => (\n"
                },
                {
                    "date": 1712482886517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE\n+        reorderOptions.isReversed ? (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null\n+        }\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482894835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE\n+        reorderOptions.isReversed ? (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null\n+        }\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482906042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n           >\n             Reset\n           </button>\n         ) : null\n-        }\n+        {'}'}\n       </div>\n \n       <ul>\n         {visibleGoods.map((good, index) => (\n"
                },
                {
                    "date": 1712482937233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,21 +107,20 @@\n         >\n           Reverse\n         </button>\n \n-        {reorderOptions.sortType !== SortType.NONE\n-        reorderOptions.isReversed ? (\n+        {reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n           <button\n             type=\"button\"\n             className=\"button is-danger\"\n             onClick={handleReset}\n           >\n             Reset\n           </button>\n-        ) : null\n-        }\n+        ) : null}\n       </div>\n \n+\n       <ul>\n         {visibleGoods.map((good, index) => (\n           <li key={index} data-cy=\"Good\">\n             {good}\n"
                },
                {
                    "date": 1712482952889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reordOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482967487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482978949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,10 @@\n         >\n           Reverse\n         </button>\n \n-        {reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n+        {\n+        reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n           <button\n             type=\"button\"\n             className=\"button is-danger\"\n             onClick={handleReset}\n"
                },
                {
                    "date": 1712482988342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712482994410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+          <button\n+              type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        ) : null}\n+      </div>\n+\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712483002529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+              type=\"button\"\n+              className=\"button is-danger\"\n+              onClick={handleReset}\n+            >\n+            Reset\n+            </button>\n+          ) : null}\n+      </div>\n+\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712483010620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+              type=\"button\"\n+              className=\"button is-danger\"\n+              onClick={handleReset}\n+            >\n+            Reset\n+            </button>\n+          ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712483118624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      sortType: SortType.NONE, // Reset sort type when reversing\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+              type=\"button\"\n+              className=\"button is-danger\"\n+              onClick={handleReset}\n+            >\n+            Reset\n+            </button>\n+          ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712483167157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      sortType: SortType.NONE, \n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+              type=\"button\"\n+              className=\"button is-danger\"\n+              onClick={handleReset}\n+            >\n+            Reset\n+            </button>\n+          ) : null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712483178029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n               onClick={handleReset}\n             >\n             Reset\n             </button>\n-          ) : null}\n+          )}\n       </div>\n \n       <ul>\n         {visibleGoods.map((good, index) => (\n"
                },
                {
                    "date": 1712483191478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n               onClick={handleReset}\n             >\n             Reset\n             </button>\n-          )}\n+          )\\}\n       </div>\n \n       <ul>\n         {visibleGoods.map((good, index) => (\n"
                },
                {
                    "date": 1712483199311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      sortType: SortType.NONE,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+              type=\"button\"\n+              className=\"button is-danger\"\n+              onClick={handleReset}\n+            >\n+            Reset\n+            </button>\n+          }\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712483257514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    // Reverse the order of the list\n+    const reversedOptions: ReorderOptions = {\n+      sortType: SortType.NONE,\n+      isReversed: !reorderOptions.isReversed,\n+    };\n+    const reversedGoods = getReorderedGoods(goodsFromServer, reversedOptions);\n+\n+    // Sort the reversed list alphabetically\n+    reversedGoods.sort();\n+\n+    // Set the state with the reversed and alphabetically sorted list\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET, // Set sort type to alphabetically\n+      isReversed: !reorderOptions.isReversed,\n+    });\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+              type=\"button\"\n+              className=\"button is-danger\"\n+              onClick={handleReset}\n+            >\n+            Reset\n+            </button>\n+          )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712483288857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    // Reverse the order of the list\n+    const reversedOptions: ReorderOptions = {\n+      sortType: SortType.NONE,\n+      isReversed: !reorderOptions.isReversed,\n+    };\n+    const reversedGoods = getReorderedGoods(goodsFromServer, reversedOptions);\n+\n+    // Sort the reversed list alphabetically\n+    reversedGoods.sort();\n+\n+    // Set the state with the reversed and alphabetically sorted list\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET, // Set sort type to alphabetically\n+      isReversed: !reorderOptions.isReversed,\n+    });\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+              type=\"button\"\n+              className=\"button is-danger\"\n+              onClick={handleReset}\n+            >\n+            Reset\n+            </button>\n+          ): null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712483313977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+  // Reverse the order of the list\n+  const reversedOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: !reorderOptions.isReversed,\n+  };\n+  const reversedGoods = getReorderedGoods(goodsFromServer, reversedOptions);\n+\n+  // Sort the reversed list alphabetically\n+  reversedGoods.sort();\n+\n+  // Set the state with the reversed and alphabetically sorted list\n+  setReorderOptions({\n+    sortType: SortType.ALPHABET, // Set sort type to alphabetically\n+    isReversed: !reorderOptions.isReversed,\n+  });\n+};\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+              type=\"button\"\n+              className=\"button is-danger\"\n+              onClick={handleReset}\n+            >\n+            Reset\n+            </button>\n+          )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712487088258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  });\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      sortType: SortType.NONE,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions({\n+      sortType: SortType.NONE,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {reorderOptions.sortType !== SortType.NONE ||\n+        reorderOptions.isReversed ? (\n+            <button\n+              type=\"button\"\n+              className=\"button is-danger\"\n+              onClick={handleReset}\n+            >\n+            Reset\n+            </button>\n+          ): null}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712487117824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+import React from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button type=\"button\" className=\"button is-info is-light\">\n+          Sort alphabetically\n+        </button>\n+\n+        <button type=\"button\" className=\"button is-success is-light\">\n+          Sort by length\n+        </button>\n+\n+        <button type=\"button\" className=\"button is-warning is-light\">\n+          Reverse\n+        </button>\n+\n+        <button type=\"button\" className=\"button is-danger is-light\">\n+          Reset\n+        </button>\n+      </div>\n+\n+      <ul>\n+        <ul>\n+          <li data-cy=\"Good\">Dumplings</li>\n+          <li data-cy=\"Good\">Carrot</li>\n+          <li data-cy=\"Good\">Eggs</li>\n+          <li data-cy=\"Good\">Ice cream</li>\n+          <li data-cy=\"Good\">Apple</li>\n+          <li data-cy=\"Good\">...</li>\n+        </ul>\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712487255736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  // Check if goods are already in the original order\n+  const isGoodsInOriginalOrder = JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712487262752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  // Check if goods are already in the original order\n+  const isGoodsInOriginalOrder = JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712487271204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  // Check if goods are already in the original order\n+  const isGoodsInOriginalOrder = JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n+function getReorderedGoods(goodsFromServer: string[], reorderOptions: ReorderOptions) {\n+  throw new Error('Function not implemented.');\n+}\n+\n"
                },
                {
                    "date": 1712487277893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  // Check if goods are already in the original order\n+  const isGoodsInOriginalOrder = JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712487332782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,16 +25,34 @@\n   sortType: SortType;\n   isReversed: boolean;\n };\n \n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n export const App: React.FC = () => {\n   const initialOptions: ReorderOptions = {\n     sortType: SortType.NONE,\n     isReversed: false,\n   };\n \n-  const [reorderOptions, setReorderOptions] =\n-    useState<ReorderOptions>(initialOptions);\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>(initialOptions);\n \n   const handleSortAlphabetically = () => {\n     setReorderOptions({\n       sortType: SortType.ALPHABET,\n@@ -61,9 +79,8 @@\n   };\n \n   const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n \n-  // Check if goods are already in the original order\n   const isGoodsInOriginalOrder = JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n \n   return (\n     <div className=\"section content\">\n"
                },
                {
                    "date": 1712487338766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712487414894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      sortType: prevOptions.sortType === SortType.NONE ? SortType.ALPHABET : prevOptions.sortType,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712487495993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      sortType: prevOptions.sortType === SortType.NONE ? SortType.ALPHABET : prevOptions.sortType,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712510610168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,15 +53,23 @@\n \n   const [reorderOptions, setReorderOptions] =\n     useState<ReorderOptions>(initialOptions);\n \n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n+    const handleSortAlphabetically = () => {\n+      // If the current sort type is reverse, reset it to sort alphabetically\n+      if (reorderOptions.sortType === SortType.NONE || reorderOptions.sortType === SortType.LENGTH) {\n+        setReorderOptions({\n+          sortType: SortType.ALPHABET,\n+          isReversed: false,\n+        });\n+      } else {\n+        // If the current sort type is already alphabetically, toggle the reverse\n+        setReorderOptions(prevOptions => ({\n+          ...prevOptions,\n+          isReversed: !prevOptions.isReversed,\n+        }));\n+      }\n+    };\n   const handleSortByLength = () => {\n     setReorderOptions({\n       sortType: SortType.LENGTH,\n       isReversed: false,\n@@ -69,275 +77,8 @@\n   };\n \n   const handleReverse = () => {\n     setReorderOptions(prevOptions => ({\n-      sortType: prevOptions.sortType === SortType.NONE ? SortType.ALPHABET : prevOptions.sortType,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions(initialOptions);\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  const isGoodsInOriginalOrder =\n-    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {isGoodsInOriginalOrder ? null : (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const initialOptions: ReorderOptions = {\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  };\n-\n-  const [reorderOptions, setReorderOptions] =\n-    useState<ReorderOptions>(initialOptions);\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      sortType: prevOptions.sortType === SortType.NONE ? SortType.ALPHABET : prevOptions.sortType,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions(initialOptions);\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  const isGoodsInOriginalOrder =\n-    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {isGoodsInOriginalOrder ? null : (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const initialOptions: ReorderOptions = {\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  };\n-\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>(initialOptions);\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n       ...prevOptions,\n       isReversed: !prevOptions.isReversed,\n     }));\n   };\n@@ -398,4734 +139,4 @@\n       </ul>\n     </div>\n   );\n };\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const initialOptions: ReorderOptions = {\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  };\n-\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>(initialOptions);\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions(initialOptions);\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  const isGoodsInOriginalOrder = JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {isGoodsInOriginalOrder ? null : (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export const App: React.FC = () => {\n-  const initialOptions: ReorderOptions = {\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  };\n-\n-  const [reorderOptions, setReorderOptions] =\n-    useState<ReorderOptions>(initialOptions);\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions(initialOptions);\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  // Check if goods are already in the original order\n-  const isGoodsInOriginalOrder = JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {isGoodsInOriginalOrder ? null : (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-function getReorderedGoods(goodsFromServer: string[], reorderOptions: ReorderOptions) {\n-  throw new Error('Function not implemented.');\n-}\n-\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export const App: React.FC = () => {\n-  const initialOptions: ReorderOptions = {\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  };\n-\n-  const [reorderOptions, setReorderOptions] =\n-    useState<ReorderOptions>(initialOptions);\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions(initialOptions);\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  // Check if goods are already in the original order\n-  const isGoodsInOriginalOrder = JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {isGoodsInOriginalOrder ? null : (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export const App: React.FC = () => {\n-  const initialOptions: ReorderOptions = {\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  };\n-\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>(initialOptions);\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions(initialOptions);\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  // Check if goods are already in the original order\n-  const isGoodsInOriginalOrder = JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {isGoodsInOriginalOrder ? null : (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button type=\"button\" className=\"button is-info is-light\">\n-          Sort alphabetically\n-        </button>\n-\n-        <button type=\"button\" className=\"button is-success is-light\">\n-          Sort by length\n-        </button>\n-\n-        <button type=\"button\" className=\"button is-warning is-light\">\n-          Reverse\n-        </button>\n-\n-        <button type=\"button\" className=\"button is-danger is-light\">\n-          Reset\n-        </button>\n-      </div>\n-\n-      <ul>\n-        <ul>\n-          <li data-cy=\"Good\">Dumplings</li>\n-          <li data-cy=\"Good\">Carrot</li>\n-          <li data-cy=\"Good\">Eggs</li>\n-          <li data-cy=\"Good\">Ice cream</li>\n-          <li data-cy=\"Good\">Apple</li>\n-          <li data-cy=\"Good\">...</li>\n-        </ul>\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      sortType: SortType.NONE,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-              type=\"button\"\n-              className=\"button is-danger\"\n-              onClick={handleReset}\n-            >\n-            Reset\n-            </button>\n-          ): null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-  // Reverse the order of the list\n-  const reversedOptions: ReorderOptions = {\n-    sortType: SortType.NONE,\n-    isReversed: !reorderOptions.isReversed,\n-  };\n-  const reversedGoods = getReorderedGoods(goodsFromServer, reversedOptions);\n-\n-  // Sort the reversed list alphabetically\n-  reversedGoods.sort();\n-\n-  // Set the state with the reversed and alphabetically sorted list\n-  setReorderOptions({\n-    sortType: SortType.ALPHABET, // Set sort type to alphabetically\n-    isReversed: !reorderOptions.isReversed,\n-  });\n-};\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-              type=\"button\"\n-              className=\"button is-danger\"\n-              onClick={handleReset}\n-            >\n-            Reset\n-            </button>\n-          )}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    // Reverse the order of the list\n-    const reversedOptions: ReorderOptions = {\n-      sortType: SortType.NONE,\n-      isReversed: !reorderOptions.isReversed,\n-    };\n-    const reversedGoods = getReorderedGoods(goodsFromServer, reversedOptions);\n-\n-    // Sort the reversed list alphabetically\n-    reversedGoods.sort();\n-\n-    // Set the state with the reversed and alphabetically sorted list\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET, // Set sort type to alphabetically\n-      isReversed: !reorderOptions.isReversed,\n-    });\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-              type=\"button\"\n-              className=\"button is-danger\"\n-              onClick={handleReset}\n-            >\n-            Reset\n-            </button>\n-          ): null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    // Reverse the order of the list\n-    const reversedOptions: ReorderOptions = {\n-      sortType: SortType.NONE,\n-      isReversed: !reorderOptions.isReversed,\n-    };\n-    const reversedGoods = getReorderedGoods(goodsFromServer, reversedOptions);\n-\n-    // Sort the reversed list alphabetically\n-    reversedGoods.sort();\n-\n-    // Set the state with the reversed and alphabetically sorted list\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET, // Set sort type to alphabetically\n-      isReversed: !reorderOptions.isReversed,\n-    });\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-              type=\"button\"\n-              className=\"button is-danger\"\n-              onClick={handleReset}\n-            >\n-            Reset\n-            </button>\n-          )}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      sortType: SortType.NONE,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-              type=\"button\"\n-              className=\"button is-danger\"\n-              onClick={handleReset}\n-            >\n-            Reset\n-            </button>\n-          }\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      sortType: SortType.NONE, \n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-              type=\"button\"\n-              className=\"button is-danger\"\n-              onClick={handleReset}\n-            >\n-            Reset\n-            </button>\n-          )\\}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      sortType: SortType.NONE, // Reset sort type when reversing\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-              type=\"button\"\n-              className=\"button is-danger\"\n-              onClick={handleReset}\n-            >\n-            Reset\n-            </button>\n-          ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-              type=\"button\"\n-              className=\"button is-danger\"\n-              onClick={handleReset}\n-            >\n-            Reset\n-            </button>\n-          ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-              type=\"button\"\n-              className=\"button is-danger\"\n-              onClick={handleReset}\n-            >\n-            Reset\n-            </button>\n-          ) : null}\n-      </div>\n-\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-          <button\n-              type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {\n-        reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reordOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE\n-        reorderOptions.isReversed ? (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null\n-        {'}'}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE\n-        || reorderOptions.isReversed ? (\n-\n-\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null{'}'}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE\n-        || reorderOptions.isReversed ? (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n-\n-\n-          \n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <butttype=\"button\"\n-              className=\"button is-danger\"\n-            onClick={handleReset}\n-            >\n-            Reset\n-            </button>\n-          ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-          type=\"button\"\n-              className=\"button is-danger\"\n-              onClick={handleReset}\n-            >\n-            Reset\n-            </button>\n-          ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-          type=\"button\"\n-              className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-            </button>\n-          ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-          type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-          ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-            <button\n-          type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-          <button\n-              type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-              <button\n-              type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE ||\n-        reorderOptions.isReversed ? (\n-        <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        {reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger\"\n-            onClick={handleReset}\n-          >\n-            Reset\n-          </button>\n-        ) : null}\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions(prevOptions => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-danger ${reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReset}\n-        >\n-          Reset\n-        </button>\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions((prevOptions) => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-danger ${reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReset}\n-        >\n-          Reset\n-        </button>\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  const visibleGoods = [...goods];\n-\n-  if (sortType === SortType.ALPHABET) {\n-    visibleGoods.sort();\n-  } else if (sortType === SortType.LENGTH) {\n-    visibleGoods.sort((a, b) => a.length - b.length);\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n-    sortType: SortType.NONE,\n-    isReversed: false,\n-  });\n-\n-  const handleSortAlphabetically = () => {\n-    setReorderOptions({\n-      sortType: SortType.ALPHABET,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleSortByLength = () => {\n-    setReorderOptions({\n-      sortType: SortType.LENGTH,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const handleReverse = () => {\n-    setReorderOptions((prevOptions) => ({\n-      ...prevOptions,\n-      isReversed: !prevOptions.isReversed,\n-    }));\n-  };\n-\n-  const handleReset = () => {\n-    setReorderOptions({\n-      sortType: SortType.NONE,\n-      isReversed: false,\n-    });\n-  };\n-\n-  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n-          onClick={handleSortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n-          onClick={handleSortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReverse}\n-        >\n-          Reverse\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-danger ${reorderOptions.sortType !== SortType.NONE || reorderOptions.isReversed ? '' : 'is-light'}`}\n-          onClick={handleReset}\n-        >\n-          Reset\n-        </button>\n-      </div>\n-\n-      <ul>\n-        {visibleGoods.map((good, index) => (\n-          <li key={index} data-cy=\"Good\">\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button type=\"button\" className=\"button is-info is-light\">\n-          Sort alphabetically\n-        </button>\n-\n-        <button type=\"button\" className=\"button is-success is-light\">\n-          Sort by length\n-        </button>\n-\n-        <button type=\"button\" className=\"button is-warning is-light\">\n-          Reverse\n-        </button>\n-\n-        <button type=\"button\" className=\"button is-danger is-light\">\n-          Reset\n-        </button>\n-      </div>\n-\n-      <ul>\n-        <ul>\n-          <li data-cy=\"Good\">Dumplings</li>\n-          <li data-cy=\"Good\">Carrot</li>\n-          <li data-cy=\"Good\">Eggs</li>\n-          <li data-cy=\"Good\">Ice cream</li>\n-          <li data-cy=\"Good\">Apple</li>\n-          <li data-cy=\"Good\">...</li>\n-        </ul>\n-      </ul>\n-    </div>\n-  );\n-};\n-import React from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button type=\"button\" className=\"button is-info is-light\">\n-          Sort alphabetically\n-        </button>\n-\n-        <button type=\"button\" className=\"button is-success is-light\">\n-          Sort by length\n-        </button>\n-\n-        <button type=\"button\" className=\"button is-warning is-light\">\n-          Reverse\n-        </button>\n-\n-        <button type=\"button\" className=\"button is-danger is-light\">\n-          Reset\n-        </button>\n-      </div>\n-\n-      <ul>\n-        <ul>\n-          <li data-cy=\"Good\">Dumplings</li>\n-          <li data-cy=\"Good\">Carrot</li>\n-          <li data-cy=\"Good\">Eggs</li>\n-          <li data-cy=\"Good\">Ice cream</li>\n-          <li data-cy=\"Good\">Apple</li>\n-          <li data-cy=\"Good\">...</li>\n-        </ul>\n-      </ul>\n-    </div>\n-  );\n-};\n-1. `Sort alphabetically` button should sort the goods alphabetically.\n-    - remove `is-light` class from the button when this order is applied;\n-1. `Sort by length` button should sort the goods by length.\n-    - remove `is-light` class from the button when this order is applied;\n-1. `Reverse` button changes the current order to the opposite one.\n-    - it should work together with any sorting;\n-    - remove `is-light` class from the button when goods are reversed;\n-    - the second click should show goods in the direct order;\n-1. `Reset` button should show the goods in the initial order.\n-    - it should be visible only if goods are not already in the original order;\n"
                },
                {
                    "date": 1712510618357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+      // If the current sort type is reverse, reset it to sort alphabetically\n+    if (reorderOptions.sortType === SortType.NONE || reorderOptions.sortType === SortType.LENGTH) {\n+        setReorderOptions({\n+          sortType: SortType.ALPHABET,\n+          isReversed: false,\n+        });\n+      } else {\n+        // If the current sort type is already alphabetically, toggle the reverse\n+        setReorderOptions(prevOptions => ({\n+          ...prevOptions,\n+          isReversed: !prevOptions.isReversed,\n+        }));\n+      }\n+    };\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712510627149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+      // If the current sort type is reverse, reset it to sort alphabetically\n+    if (\n+      reorderOptions.sortType === SortType.NONE ||\n+      reorderOptions.sortType === SortType.LENGTH\n+    ) {\n+      setReorderOptions({\n+          sortType: SortType.ALPHABET,\n+          isReversed: false,\n+        });\n+      } else {\n+        // If the current sort type is already alphabetically, toggle the reverse\n+        setReorderOptions(prevOptions => ({\n+          ...prevOptions,\n+          isReversed: !prevOptions.isReversed,\n+        }));\n+      }\n+    };\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712510637808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+      // If the current sort type is reverse, reset it to sort alphabetically\n+    if (\n+      reorderOptions.sortType === SortType.NONE ||\n+      reorderOptions.sortType === SortType.LENGTH\n+    ) {\n+      setReorderOptions({\n+        sortType: SortType.ALPHABET,\n+        isReversed: false,\n+      });\n+      } else {\n+        // If the current sort type is already alphabetically, toggle the reverse\n+        setReorderOptions(prevOptions => ({\n+          ...prevOptions,\n+          isReversed: !prevOptions.isReversed,\n+        }));\n+      }\n+    };\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712510644890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+      // If the current sort type is reverse, reset it to sort alphabetically\n+    if (\n+      reorderOptions.sortType === SortType.NONE ||\n+      reorderOptions.sortType === SortType.LENGTH\n+    ) {\n+      setReorderOptions({\n+        sortType: SortType.ALPHABET,\n+        isReversed: false,\n+      });\n+    } else {\n+        setReorderOptions(prevOptions => ({\n+          ...prevOptions,\n+          isReversed: !prevOptions.isReversed,\n+        }));\n+      }\n+    };\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712510653310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+      // If the current sort type is reverse, reset it to sort alphabetically\n+    if (\n+      reorderOptions.sortType === SortType.NONE ||\n+      reorderOptions.sortType === SortType.LENGTH\n+    ) {\n+      setReorderOptions({\n+        sortType: SortType.ALPHABET,\n+        isReversed: false,\n+      });\n+    } else {\n+      setReorderOptions(prevOptions => ({\n+        ...prevOptions,\n+        isReversed: !prevOptions.isReversed,\n+      }));\n+    }\n+  };\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712510805944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+      // If the current sort type is reverse, reset it to sort alphabetically\n+    if (\n+      reorderOptions.sortType === SortType.NONE ||\n+      reorderOptions.sortType === SortType.LENGTH\n+    ) {\n+      setReorderOptions({\n+        sortType: SortType.ALPHABET,\n+        isReversed: false,\n+      });\n+    } else {\n+      setReorderOptions(prevOptions => ({\n+        ...prevOptions,\n+        isReversed: !prevOptions.isReversed,\n+      }));\n+    }\n+  };\n+  \n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712510811032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n+\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712511119198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div>\n+      <button onClick={handleSortAlphabetically}>\n+        Sort alphabetically\n+      </button>\n+\n+      <button onClick={handleSortByLength}>\n+        Sort by length\n+      </button>\n+\n+      <button onClick={handleReverse}>\n+        Reverse\n+      </button>\n+\n+      {!isGoodsInOriginalOrder && (\n+        <button onClick={handleReset}>\n+          Reset\n+        </button>\n+      )}\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712511126430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div>\n+      <button onClick={handleSortAlphabetically}>\n+        Sort alphabetically\n+      </button>\n+\n+      <button onClick={handleSortByLength}>\n+        Sort by length\n+      </button>\n+\n+      <button onClick={handleReverse}>\n+        Reverse\n+      </button>\n+\n+      {!isGoodsInOriginalOrder && (\n+        <button onClick={handleReset}>\n+          Reset\n+        </button>\n+      )}\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index}>{good}</li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712511133486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div>\n+      <button onClick={handleSortAlphabetically}>\n+        Sort alphabetically\n+      </button>\n+\n+      <button onClick={handleSortByLength}>\n+        Sort by length\n+      </button>\n+\n+      <button onClick={handleReverse}>Reverse</button>\n+\n+      {!isGoodsInOriginalOrder && <button onClick={handleReset}>Reset</button>}\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index}>{good}</li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712511139106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div>\n+      <button onClick={handleSortAlphabetically}>\n+        Sort alphabetically\n+      </button>\n+\n+      <button onClick={handleSortByLength}>Sort by length</button>\n+\n+      <button onClick={handleReverse}>Reverse</button>\n+\n+      {!isGoodsInOriginalOrder && <button onClick={handleReset}>Reset</button>}\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index}>{good}</li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712511149486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import React, { useState } from 'react';\n+import \n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div>\n+      <button onClick={handleSortAlphabetically}>Sort alphabetically</button>\n+\n+      <button onClick={handleSortByLength}>Sort by length</button>\n+\n+      <button onClick={handleReverse}>Reverse</button>\n+\n+      {!isGoodsInOriginalOrder && <button onClick={handleReset}>Reset</button>}\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index}>{good}</li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712511158692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n \n export const goodsFromServer = [\n   'Dumplings',\n   'Carrot',\n@@ -82,22 +84,50 @@\n   const isGoodsInOriginalOrder =\n     JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n \n   return (\n-    <div>\n-      <button onClick={handleSortAlphabetically}>\n-        Sort alphabetically\n-      </button>\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${reorderOptions.sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n+          onClick={handleSortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n \n-      <button onClick={handleSortByLength}>Sort by length</button>\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${reorderOptions.sortType === SortType.LENGTH ? '' : 'is-light'}`}\n+          onClick={handleSortByLength}\n+        >\n+          Sort by length\n+        </button>\n \n-      <button onClick={handleReverse}>Reverse</button>\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${reorderOptions.isReversed ? '' : 'is-light'}`}\n+          onClick={handleReverse}\n+        >\n+          Reverse\n+        </button>\n \n-      {!isGoodsInOriginalOrder && <button onClick={handleReset}>Reset</button>}\n+        {isGoodsInOriginalOrder ? null : (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger\"\n+            onClick={handleReset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n \n       <ul>\n         {visibleGoods.map((good, index) => (\n-          <li key={index}>{good}</li>\n+          <li key={index} data-cy=\"Good\">\n+            {good}\n+          </li>\n         ))}\n       </ul>\n     </div>\n   );\n"
                },
                {
                    "date": 1712511176095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,11 +103,9 @@\n       )}\n \n       <ul>\n         {visibleGoods.map((good, index) => (\n-          <li key={index}>\n-            {good}\n-          </li>\n+          <li key={index}>{good}</li>\n         ))}\n       </ul>\n     </div>\n   );\n"
                },
                {
                    "date": 1712511181268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,11 +91,9 @@\n       <button onClick={handleSortByLength}>\n         Sort by length\n       </button>\n \n-      <button onClick={handleReverse}>\n-        Reverse\n-      </button>\n+      <button onClick={handleReverse}>Reverse</button>\n \n       {!isGoodsInOriginalOrder && <button onClick={handleReset}>Reset</button>}\n \n       <ul>\n"
                },
                {
                    "date": 1712511193357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import React, { useState } from 'react';\n+import './'\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  const visibleGoods = [...goods];\n+\n+  if (sortType === SortType.ALPHABET) {\n+    visibleGoods.sort();\n+  } else if (sortType === SortType.LENGTH) {\n+    visibleGoods.sort((a, b) => a.length - b.length);\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const initialOptions: ReorderOptions = {\n+    sortType: SortType.NONE,\n+    isReversed: false,\n+  };\n+\n+  const [reorderOptions, setReorderOptions] =\n+    useState<ReorderOptions>(initialOptions);\n+\n+  const handleSortAlphabetically = () => {\n+    setReorderOptions({\n+      sortType: SortType.ALPHABET,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleSortByLength = () => {\n+    setReorderOptions({\n+      sortType: SortType.LENGTH,\n+      isReversed: false,\n+    });\n+  };\n+\n+  const handleReverse = () => {\n+    setReorderOptions(prevOptions => ({\n+      ...prevOptions,\n+      isReversed: !prevOptions.isReversed,\n+    }));\n+  };\n+\n+  const handleReset = () => {\n+    setReorderOptions(initialOptions);\n+  };\n+\n+  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n+\n+  const isGoodsInOriginalOrder =\n+    JSON.stringify(reorderOptions) === JSON.stringify(initialOptions);\n+\n+  return (\n+    <div>\n+      <button onClick={handleSortAlphabetically}>Sort alphabetically</button>\n+\n+      <button onClick={handleSortByLength}>Sort by length</button>\n+\n+      <button onClick={handleReverse}>Reverse</button>\n+\n+      {!isGoodsInOriginalOrder && <button onClick={handleReset}>Reset</button>}\n+\n+      <ul>\n+        {visibleGoods.map((good, index) => (\n+          <li key={index}>{good}</li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                }
            ],
            "date": 1712482358559,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType;\n  isReversed: boolean;\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\n// type State = {\n//   isReversed: boolean,\n//   sortType: SortType,\n// };\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button type=\"button\" className=\"button is-info is-light\">\n          Sort alphabetically\n        </button>\n\n        <button type=\"button\" className=\"button is-success is-light\">\n          Sort by length\n        </button>\n\n        <button type=\"button\" className=\"button is-warning is-light\">\n          Reverse\n        </button>\n\n        <button type=\"button\" className=\"button is-danger is-light\">\n          Reset\n        </button>\n      </div>\n\n      <ul>\n        <ul>\n          <li data-cy=\"Good\">Dumplings</li>\n          <li data-cy=\"Good\">Carrot</li>\n          <li data-cy=\"Good\">Eggs</li>\n          <li data-cy=\"Good\">Ice cream</li>\n          <li data-cy=\"Good\">Apple</li>\n          <li data-cy=\"Good\">...</li>\n        </ul>\n      </ul>\n    </div>\n  );\n};\n1. `Sort alphabetically` button should sort the goods alphabetically.\n    - remove `is-light` class from the button when this order is applied;\n1. `Sort by length` button should sort the goods by length.\n    - remove `is-light` class from the button when this order is applied;\n1. `Reverse` button changes the current order to the opposite one.\n    - it should work together with any sorting;\n    - remove `is-light` class from the button when goods are reversed;\n    - the second click should show goods in the direct order;\n1. `Reset` button should show the goods in the initial order.\n    - it should be visible only if goods are not already in the original order;\n"
        }
    ]
}